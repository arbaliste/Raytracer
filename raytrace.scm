;;; Scheme Recursive Art Contest Entry
;;;
;;; Please do not include your name or personal info in this file.
;;;
;;; Title: <Your title here>
;;;
;;; Description:
;;;   <It's your masterpiece.
;;;    Use these three lines to describe
;;;    its inner meaning.>

; Uncomment for running in racket
#lang racket
(require racket/draw)
(define (screen_width) 150)
(define (screen_height) 150)
(define target (make-bitmap (screen_width) (screen_height)))
(define dc (new bitmap-dc% [bitmap target]))
(define (exitonclick) (send target save-file "output.png" 'png))
(send dc set-pen "" 0 'transparent)
(define (pixel x y color)
 (send dc set-pixel x (- (screen_height) 1 y) color))
(define (rgb r g b)
 (make-object color%
   (exact-round (exact->inexact (* 255 r)))
   (exact-round (exact->inexact (* 255 g)))
   (exact-round (exact->inexact (* 255 b)))))
(define nil '())

; General utils
(define (all l)
  (cond
    ((null? l) #t)
    ((not (car l)) #f)
    (all (cdr l))))
(define (clamp oldmin oldmax newmin newmax val)
  (+ (* (/ (- val oldmin) (- oldmax oldmin)) (- newmax newmin)) newmin))
(define (min a b)
  (if (< a b)
      a
      b))
(define (max a b)
  (if (< a b)
      b
      a))
(define (ntake list n)
    ; Takes n elements from a list and returns (first-n . remaining)
    ; WARNING: Not tail recursive, n shouldn't be large
    (define (iter list n)
      (if (= n 0)
        (cons nil list)
        (let
          ((next (iter (cdr list) (- n 1))))
          (cons
            (cons (car list) (car next))
            (cdr next)))))
    (iter list n))
(define (ngroup list n)
    ; Splits a list into sublists of n elements each
    ; Tail recursive
    (define (iter-reverse prev list)
      (if (null? list)
        prev
        (let
          ((take (ntake list n)))
          (iter-reverse
            (cons (car take) prev)
            (cdr take)))))
    (reverse (iter-reverse nil list)))
(define (loop-range min-val max-val func)
  ; Basically a for loop
  (func min-val)
  (if (< (+ min-val 1) max-val)
      (loop-range (+ min-val 1) max-val func)
      nil))
(define (zip pairs)
  ; Zips multiple lists together
  ; Returns: list of lists
  ; WARNING: Not fail recursive, lists shouldn't be large
  (if (null? pairs)
      '(() ())
      (if (null? (car pairs))
          nil
          (cons (map car pairs) (zip (map cdr pairs))))))
(define (list-index s index)
  ; Gets the element of a list at an index
  ; Returns: (index)th element of l
  (if (= 0 index)
      (car s)
      (list-index (cdr s) (- index 1))))
(define (map procedure s)
  ; Tail-recursive map, from https://cs61a.org/assets/slides/29-Tail_Calls_full.pdf
  (define (map-reverse s m)
    (if (null? s)
      m
      (map-reverse
        (cdr s)
        (cons (procedure (car s)) m))))
  (reverse (map-reverse s nil)))
(define (reverse s)
  ; Tail-recursive reverse, from https://cs61a.org/assets/slides/29-Tail_Calls_full.pdf
  (define (reverse-iter s r)
    (if (null? s)
      r
      (reverse-iter
        (cdr s)
        (cons (car s) r))))
  (reverse-iter s nil))
(define (reduce func s)
  ; Tail-recursive reduce
  (if (null? (cdr s))
    (car s)
    (reduce func
      (cons
        (func (car s) (car (cdr s)))
        (cdr (cdr s))))))
(define (square x) (* x x))
(define (round x)
  (if (>= x 0)
      (floor (+ x 0.5))
      (- (round (- x)))))

; Vectors
; Vector structure: (x y z)
(define vec-create list)
(define (vec-x vec) (list-index vec 0))
(define (vec-y vec) (list-index vec 1))
(define (vec-z vec) (list-index vec 2))
(define (vec-mul v1 scalar) (map (lambda (x) (* x scalar)) v1))
(define (vec-mulvec v1 v2) (map (lambda (x) (reduce * x)) (zip (list v1 v2))))
(define (vec-add v1 v2) (map (lambda (x) (reduce + x)) (zip (list v1 v2))))
(define (vec-sub v1 v2) (vec-add v1 (vec-mul v2 -1)))
(define (vec-dot v1 v2) (reduce + (map (lambda (x) (reduce * x)) (zip (list v1 v2)))))
(define (vec-cross v1 v2) ; Only 3d
  (vec-create
   (- (* (vec-y v1) (vec-z v2)) (* (vec-z v1) (vec-y v2)))
   (- (* (vec-z v1) (vec-x v2)) (* (vec-x v1) (vec-z v2)))
   (- (* (vec-x v1) (vec-y v2)) (* (vec-y v1) (vec-x v2)))))
(define (vec-distsq v1 v2) (reduce + (map (lambda (x) (square (reduce - x))) (zip (list v1 v2)))))
(define (vec-dist v1 v2) (sqrt (vec-distsq v1 v2)))
(define vec-zero (vec-create 0 0 0))
(define (vec-magnitudesq v1) (vec-dot v1 v1))
(define (vec-magnitude v1) (sqrt (vec-magnitudesq v1)))
(define (vec-normalize v1) (vec-mul v1 (/ 1 (vec-magnitude v1))))
(define (vec-colormap vec) (map (lambda (x) (min x 1)) vec))  
(define (vec-rgb vec) (apply rgb vec))

; Rays
(define (ray-create orig dir) (list orig (vec-normalize dir)))
(define (ray-orig ray) (list-index ray 0))
(define (ray-dir ray) (list-index ray 1))

; Objects
; Object structure: (intersect-function properties color reflection)
; Intersect function: determines whether an object intersects with a ray
;   Returns: ray of phit and nhit
;            nil if no intersection
; Properties: list of object type specific attributes
; Color: vec3 (color)
; Reflection: from 0 to 1, amount reflected
(define object-create list)
(define (object-intersect obj) (list-index obj 0))
(define (object-properties obj) (list-index obj 1))
(define (object-color obj) (list-index obj 2))
(define (object-reflection obj) (list-index obj 3))
(define (make-constant-color color)
  (lambda (object point)
    color))
(define (make-checkerboard-color color1 color2 gridsize)
  (lambda (object point)
    (define modvec (map (lambda (p) (modulo (round (/ p gridsize)) 2)) point))
    (define xmod (vec-x modvec))
    (define ymod (vec-y modvec))
    (define zmod (vec-z modvec))
    (if (if (= ymod 0)
          (= xmod zmod)
          (not (= xmod zmod)))
        color1
        color2)))
; Planes
; Plane properties: (p normal)
(define (plane-create p normal color reflection)
  (object-create plane-intersect (list p normal) color reflection))
(define (plane-intersect plane ray)
  (define invnorm (vec-mul (vec-normalize (plane-normal plane)) -1))
  (define point (plane-point plane))
  (define direction (ray-dir ray))
  (define origin (ray-orig ray))
  (define denom (vec-dot invnorm direction))
  (if (<= denom bias)
      nil
      (let
          ((t (/ (vec-dot (vec-sub point origin) invnorm) denom)))
          (if (< t 0)
              nil
              (ray-create (vec-add origin (vec-mul direction t)) (plane-normal plane))))))
(define (plane-point plane)
  (list-index (object-properties plane) 0))
(define (plane-normal plane)
  (list-index (object-properties plane) 1))
; Spheres
; Sphere properties: (radius position)
(define (sphere-create radius vec color reflection)
  (object-create sphere-intersect (list radius vec) color reflection))
(define (sphere-intersect sphere ray)
  ; https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-sphere-intersection
  (define radius (sphere-radius sphere))
  (define position (sphere-position sphere))
  (define origin (ray-orig ray))
  (define direction (ray-dir ray))
  (define l (vec-sub position origin))
  (define tca (vec-dot l direction))
  (define d2 (- (vec-magnitudesq l) (square tca)))
  (if (or (< tca 0) (> d2 (square radius)))
      nil
      ((lambda () ; Uses lambda because begin in an expression doesn't allow defines in racket
         (define thc (sqrt (- (square radius) d2)))
         (define t0 (- tca thc))
         (define t1 (+ tca thc))
         (define t
           (cond
             ((< t0 0) t1)
             ((< t1 0) t0)
             (else (min t0 t1))))
         (if (< t 0)
             nil
             ((lambda ()
               (define phit (vec-add origin (vec-mul direction t)))
               (define nhit (vec-sub phit position))
               (ray-create phit nhit))))))))
(define (sphere-radius sphere) (list-index (object-properties sphere) 0))
(define (sphere-position sphere) (list-index (object-properties sphere) 1))
; Triangles
; Triangle properties: (p1 p2 p3)
(define (triangle-create p1 p2 p3 color reflection)
  (object-create triangle-intersect (list p1 p2 p3) color reflection))
(define (triangle-intersect triangle ray)
  ; https://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-rendering-a-triangle/geometry-of-a-triangle
  ;
  ;    C
  ;   ^  
  ;  /    
  ; A ---> B
  (define origin (ray-orig ray))
  (define direction (ray-dir ray))
  (define a (triangle-p1 triangle))
  (define b (triangle-p2 triangle))
  (define c (triangle-p3 triangle))
  (define AB (vec-sub b a))
  (define AC (vec-sub c a))
  (define normal (vec-cross AB AC))
  (define areasq (vec-magnitudesq normal))
  (define normdotray (vec-dot normal direction))
  (if (< (abs normdotray) bias) ; Remove abs for back culling
      nil
      (let
        ((t (/ (+ (vec-dot normal origin) (vec-dot normal a)) normdotray)))
        (if (< t 0)
            nil
            (let
              ((phit (vec-add origin (vec-mul direction t))))
              (if
               (all
                (map
                 (lambda (p)
                   (define point (car p))
                   (define edge (cdr p))
                   (>= (vec-dot normal (vec-cross edge (vec-sub phit point))) 0))
                 (list
                  (cons a (vec-sub b a))
                  (cons b (vec-sub c b))
                  (cons c (vec-sub a c)))))
              (ray-create phit (vec-normalize normal))
              nil))))))
(define (triangle-p1 triangle) (list-index (object-properties triangle) 0))
(define (triangle-p2 triangle) (list-index (object-properties triangle) 1))
(define (triangle-p3 triangle) (list-index (object-properties triangle) 2))
(define (calculate-bbox points)
  ; Finds the smallest bounding box around a set of points, represented as (min max)
  (list
    (vec-create
      (reduce min (map vec-x points))
      (reduce min (map vec-y points))
      (reduce min (map vec-z points)))
    (vec-create
      (reduce max (map vec-x points))
      (reduce max (map vec-y points))
      (reduce max (map vec-z points)))))
(define (bbox-intersect? bbox ray)
  ; Checks if a bounding box intersects with a ray, returns a BOOLEAN (NOT standard intersect function)
  ; https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-box-intersection
  ; TODO
  #t)
(define (mesh-create points color reflection)
  ; Creates a mesh from a list of triangle vertex positions
  (define triangles
    (map
      (lambda (vertices)
        (triangle-create (list-index vertices 0) (list-index vertices 1) (list-index vertices 2) color reflection))
      (ngroup points 3)))
  (define bbox (calculate-bbox points))
  (object-create mesh-intersect (list triangles bbox) color reflection))
(define (mesh-intersect mesh ray)
  ; Checks for intersection with bounding box for optimization
  ; If passed, checks for intersection with any of the triangles
  (if (not (bbox-intersect? (mesh-bbox mesh) ray))
      nil
      (let
        ((intersect (ray-closest ray (mesh-triangles mesh))))
        (if (null? intersect)
          nil
          (list-index intersect 1)))))
(define (mesh-triangles mesh) (list-index (object-properties mesh) 0))
(define (mesh-bbox mesh) (list-index (object-properties mesh) 1))

; Num encoding
(define (num-to-list num pow)
  ; Converts num to a list of its segments of 10**pow
  ; WARNING: Requires python scheme builtin quotient to use // instead of / 
  (define pow10 (expt 10 pow))
  (define (iter-reverse num prev)
    (if (= num 0)
      prev
      (iter-reverse (quotient num pow10) (cons (modulo num pow10) prev))))
  (iter-reverse num nil))
(define (num-to-coords num)
  ; Converts an encoded number to a list of vec coords
  ; Groups of 9 represent numbers
  ; 3 groups of numbers represent a vec

  ; 1-2 - Tens and ones
  ; 3-8 - Decimal digits
  ; 9   - Sign: 1 = positive, 2 = negative
  (ngroup
    (map
      (lambda (d)
        (define sign
          (if (= 1 (modulo d 10))
            1
            -1))
        (define num (quotient d 10))
        (* sign num (/ (expt 10 6)))
      )
      (num-to-list num 9))
    3))

; Raytracing
(define (ray-closest ray objects)
  ; Find closest object intersecting with a ray
  ; Returns: (distance^2: number, hit: ray, object: object)
  ; Returns nil if nothing hit
  (reduce
     (lambda (o1 o2)
         (cond
           ((null? o1) o2)
           ((null? o2) o1)
           ((> (list-index o1 0) (list-index o2 0)) o2)
           (else o1)))
     (map
      (lambda (object)
        (define intersect ((object-intersect object) object ray))
        (if (null? intersect)
            nil
            (list (vec-distsq (ray-orig intersect) (ray-orig ray)) intersect object)))
      objects)))
(define (get-brightness hit)
  ; Gets brightness as a function of hit position, hit normal, light position, and light intensity
  ; https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-shading/shading-spherical-light
  ; Returns: number from 0 to 1
  (*
    light-intensity
    (max 0 (vec-dot (ray-dir hit) (vec-normalize (vec-sub light-pos (ray-orig hit)))))))      ; Angle between nhit and -lightdir
(define (get-reflect dir nhit)
  ; Get a reflection direction from a direction and normal
  ; https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-shading/reflection-refraction-fresnel
  (vec-sub dir (vec-mul nhit (* 2 (vec-dot dir nhit)))))
(define (ray-trace depth ray)
  ; Traces a ray into the scene
  ; Returns: vec3 (color)
  (define closest (ray-closest ray objects))
  (if (or (null? closest) (> depth max-depth))                           ; If no object, use sky color
      (sky-color ray)
      ((lambda ()
          (define hit (list-index closest 1))
          (define object (list-index closest 2))
          (define phit (ray-orig hit))
          (define nhit (ray-dir hit))
          (define reflect-component
               (if (> (vec-magnitudesq (object-reflection object)) 0)                          ; If reflects, recurse with reflection and multiply by reflection amount
                 (vec-mulvec
                   (ray-trace (+ depth 1) (ray-create phit (get-reflect (ray-dir ray) nhit)))
                   (object-reflection object))
                 vec-zero))
          (define shadow-closest ; If object hit, cast shadow ray and calculate brightness if not in shadow
                    (ray-closest (ray-create
                                  phit
                                  (vec-sub light-pos phit)) objects))                           ; TODO: Add bias?
          (define diffuse-component
            (if (or                                                   ; If no intersecting object with shadow ray or object is beyond light, illuminate
                 (null? shadow-closest)
                 (> (square (list-index shadow-closest 0)) (vec-distsq phit light-pos)))
               (vec-mul ((object-color object) object phit) (get-brightness hit))
               vec-zero)) ; Otherwise, black
          (vec-colormap (vec-add reflect-component diffuse-component))))))                                       
(define (pixel-trace x y)
  ; Get pixel color at (x, y) by casting rays
  ; Returns: vec3 (color)
  (define lookdir (vec-normalize (vec-sub camera-lookat camera-pos)))
  (define upvec (vec-normalize camera-up))
  (define rightvec (vec-normalize (vec-cross lookdir upvec)))
  (if (not (= 0 (vec-dot upvec lookdir))) (/ 1 0) 1) ; Break if up vector isn't perpendicular to look direction

  (define screen-height
    (* 2
     (vec-dist camera-pos camera-lookat)
     (tan (* camera-fov pi (/ 360)))))
  (define scale (/ screen-height (screen_height))) ; Units per pixel
  (define yoffset (- y (/ (screen_height) 2) -0.5)) ; Offset in pixels from camera lookat. Y is not flipped because turtle graphics 0 is bottom
  (define xoffset (- x (/ (screen_width) 2) -0.5))
  (define screen-pos
    (vec-add
      (vec-add
       (vec-mul upvec (* scale yoffset))
       (vec-mul rightvec (* scale xoffset)))
      camera-lookat))
  (ray-trace 0 (ray-create
    camera-pos
    (vec-sub screen-pos camera-pos))))

; Setup
(define pi 3.141592653589793)
(define bias 0.0001)
(define max-depth 5)
(define camera-pos (vec-create 0 20 50))
(define camera-lookat (vec-create 0 0 0))
(define camera-up (vec-cross (vec-sub camera-lookat camera-pos) (vec-create -1 0 0)))
(define camera-fov 90)
(define light-pos (vec-create 0 30 30))
(define light-intensity 1)
(define (sky-color ray)
  (vec-create 0 0 0))
(define meshes '( ; Go bEaRs! 💛🐻💙
  ; bear-leg4

  ; bear-head

  ; bear-torso

  ; bear-leg2

  ; bear-leg1

  ; bear-leg3

))
(define objects
  (append
    (list ; Normal objects
      (plane-create (vec-create 0 0 0) (vec-create 0 1 0) (make-checkerboard-color (vec-create 0.3 0.3 0.3) (vec-create 0.5 0.5 0.5) 10) (vec-create 0.7 0.7 0.7))
      (sphere-create 5 (vec-create -10 5 20) (make-constant-color (vec-create 0 0.196 0.3943)) vec-zero)
      (sphere-create 5 (vec-create 5 5 15) (make-constant-color (vec-create 0.2 0.2 0.2)) (vec-create 0.8 0.8 0.8))
      (sphere-create 10 (vec-create 15 10 0) (make-constant-color (vec-create 0.9922 0.7098 0.0824)) vec-zero)
      (triangle-create (vec-create 15 15 15) (vec-create 30 15 15) (vec-create 15 25 15) (make-constant-color (vec-create 1 0 0)) vec-zero))
    nil));(map ; Mesh objects
    ;  (lambda (num)
    ;    (define coords (num-to-coords num))
    ;    (display "Found ")
    ;    (display (/ (length coords) 3))
    ;    (display " faces\n")
    ;    mesh-create coords (make-constant-color (vec-create 1 0 0)) 0))
    ;  meshes)))

; Main draw function
(define (draw)
  (display "Starting draw\n")
  ; Loops over all the pixels in the image and sets each one's color
  (loop-range 0 (screen_width)
    (lambda (x)
      (loop-range 0 (screen_height)
        (lambda (y)
          (pixel x y (vec-rgb (pixel-trace x y)))))
      (display (quotient (* 100 x) (screen_width)))
      (display "%\n")))
  (exitonclick))

; Please leave this last line alone.  You may add additional procedures above
; this line.
(draw)
